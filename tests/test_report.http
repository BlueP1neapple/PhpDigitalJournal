### Тестирование поиска оценок в дневнике по Названию предмета
GET http://localhost:8000/assessmentReport?item_name=Математика

> {%
client.test("Тестирование возможности смотреть оценки по item_name",function (){
    client.assert(response.status===200, "Проверяю код ответа. Ожидаю код 200. Фактический код: "+response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/json. Фактически: "+response.contentType.mimeType);
    client.assert(response.body[0]["lesson"]!==undefined,"Нет данных об занятии");
    client.assert(response.body[0]["lesson"]["id"]===1,"id занятия не корректен");
    client.assert(response.body[0]["lesson"]["item"]!==undefined,"Нет данных о предмете");
    client.assert(response.body[0]["lesson"]["item"]["id"]===1,"id предмета не корректен");
    client.assert(response.body[0]["lesson"]["item"]["name"]==="Математика","Название предмета не корректено");
    client.assert(response.body[0]["lesson"]["item"]["description"]==="Математика","Расшифровка предмета не корректено");
    client.assert(response.body[0]["lesson"]["date"]==="2011.11.10 8:30","Дата занятия не корректно");
    client.assert(response.body[0]["lesson"]["lessonDuration"]===40,"Продолжительность занятия не корректно");
    client.assert(response.body[0]["lesson"]["teacher"]!==undefined,"Нет данных о преподавателе");
    client.assert(response.body[0]["lesson"]["teacher"]["id"]===1,"id преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["fio"]==="Круглова Наталия Сергеевна","Фио преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["dateOfBirth"]==="1965.01.11","Дата рождения преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["phone"]==="+79222444411","Номер телефона преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["address"]==="ул. Ясная, д. 54, кв. 19","Адресс преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["cabinet"]===56,"Кабинет преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["email"]==="kruglova@gmail.com","email преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["class"]!==undefined,"Нет данных о классе");
    client.assert(response.body[0]["lesson"]["class"]["id"]===3,"id класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["number"]===6,"Номер класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["letter"]==="А","Буква класса не корректена");
    client.assert(response.body[0]["student"]!==undefined,"Нет данных о студенте");
    client.assert(response.body[0]["student"]["id"]===1,"id студента не корректен");
    client.assert(response.body[0]["student"]["fio"]==="Кузнецов Алексей Евгеньевич","ФИО студента не корректен");
    client.assert(response.body[0]["student"]["dateOfBirth"]==="2011.01.11","Дата рождения студента не корректено");
    client.assert(response.body[0]["student"]["phone"]==="+79222444488","Номер телефона студента не корректен");
    client.assert(response.body[0]["student"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс студента не корректен");
    client.assert(response.body[0]["student"]["parent"]!==undefined,"Нет данных о родителях Студента");
    client.assert(response.body[0]["student"]["parent"]["id"]===1,"id родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["fio"]==="Кузнецов Евгений Сергеевич","ФИО родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["dateOfBirth"]==="1975.10.01","Дата рождения родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["phone"]==="+79222444488","Номер телефона  родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["placeOfWork"]==="ООО Алмаз","Место работы родителей не корректено");
    client.assert(response.body[0]["student"]["parent"]["email"]==="kuznecov@gmail.com","email родителей не корректен");
    client.assert(response.body[0]["mark"]===5,"Оценка не корректена");
});
 %}

### Тестирование поиска оценок в дневнике по расшифровке названия предмета
GET http://localhost:8000/assessmentReport?item_description=Математика

> {%
client.test("Тестирование возможности смотреть оценки по item_description",function (){
    client.assert(response.status===200, "Проверяю код ответа. Ожидаю код 200. Фактический код: "+response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/json. Фактически: "+response.contentType.mimeType);
    client.assert(response.body[0]["lesson"]!==undefined,"Нет данных об занятии");
    client.assert(response.body[0]["lesson"]["id"]===1,"id занятия не корректен");
    client.assert(response.body[0]["lesson"]["item"]!==undefined,"Нет данных о предмете");
    client.assert(response.body[0]["lesson"]["item"]["id"]===1,"id предмета не корректен");
    client.assert(response.body[0]["lesson"]["item"]["name"]==="Математика","Название предмета не корректено");
    client.assert(response.body[0]["lesson"]["item"]["description"]==="Математика","Расшифровка предмета не корректено");
    client.assert(response.body[0]["lesson"]["date"]==="2011.11.10 8:30","Дата занятия не корректно");
    client.assert(response.body[0]["lesson"]["lessonDuration"]===40,"Продолжительность занятия не корректно");
    client.assert(response.body[0]["lesson"]["teacher"]!==undefined,"Нет данных о преподавателе");
    client.assert(response.body[0]["lesson"]["teacher"]["id"]===1,"id преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["fio"]==="Круглова Наталия Сергеевна","Фио преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["dateOfBirth"]==="1965.01.11","Дата рождения преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["phone"]==="+79222444411","Номер телефона преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["address"]==="ул. Ясная, д. 54, кв. 19","Адресс преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["cabinet"]===56,"Кабинет преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["email"]==="kruglova@gmail.com","email преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["class"]!==undefined,"Нет данных о классе");
    client.assert(response.body[0]["lesson"]["class"]["id"]===3,"id класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["number"]===6,"Номер класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["letter"]==="А","Буква класса не корректена");
    client.assert(response.body[0]["student"]!==undefined,"Нет данных о студенте");
    client.assert(response.body[0]["student"]["id"]===1,"id студента не корректен");
    client.assert(response.body[0]["student"]["fio"]==="Кузнецов Алексей Евгеньевич","ФИО студента не корректен");
    client.assert(response.body[0]["student"]["dateOfBirth"]==="2011.01.11","Дата рождения студента не корректено");
    client.assert(response.body[0]["student"]["phone"]==="+79222444488","Номер телефона студента не корректен");
    client.assert(response.body[0]["student"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс студента не корректен");
    client.assert(response.body[0]["student"]["parent"]!==undefined,"Нет данных о родителях Студента");
    client.assert(response.body[0]["student"]["parent"]["id"]===1,"id родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["fio"]==="Кузнецов Евгений Сергеевич","ФИО родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["dateOfBirth"]==="1975.10.01","Дата рождения родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["phone"]==="+79222444488","Номер телефона  родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["placeOfWork"]==="ООО Алмаз","Место работы родителей не корректено");
    client.assert(response.body[0]["student"]["parent"]["email"]==="kuznecov@gmail.com","email родителей не корректен");
    client.assert(response.body[0]["mark"]===5,"Оценка не корректена");
});
 %}

### Тестирование поиска оценок в дневнике по дате проведения занятия
GET http://localhost:8000/assessmentReport?lesson_date=2011.11.10 8:30

> {%
client.test("Тестирование возможности смотреть оценки по lesson_date",function (){
    client.assert(response.status===200, "Проверяю код ответа. Ожидаю код 200. Фактический код: "+response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/json. Фактически: "+response.contentType.mimeType);
    client.assert(response.body[0]["lesson"]!==undefined,"Нет данных об занятии");
    client.assert(response.body[0]["lesson"]["id"]===1,"id занятия не корректен");
    client.assert(response.body[0]["lesson"]["item"]!==undefined,"Нет данных о предмете");
    client.assert(response.body[0]["lesson"]["item"]["id"]===1,"id предмета не корректен");
    client.assert(response.body[0]["lesson"]["item"]["name"]==="Математика","Название предмета не корректено");
    client.assert(response.body[0]["lesson"]["item"]["description"]==="Математика","Расшифровка предмета не корректено");
    client.assert(response.body[0]["lesson"]["date"]==="2011.11.10 8:30","Дата занятия не корректно");
    client.assert(response.body[0]["lesson"]["lessonDuration"]===40,"Продолжительность занятия не корректно");
    client.assert(response.body[0]["lesson"]["teacher"]!==undefined,"Нет данных о преподавателе");
    client.assert(response.body[0]["lesson"]["teacher"]["id"]===1,"id преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["fio"]==="Круглова Наталия Сергеевна","Фио преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["dateOfBirth"]==="1965.01.11","Дата рождения преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["phone"]==="+79222444411","Номер телефона преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["address"]==="ул. Ясная, д. 54, кв. 19","Адресс преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["cabinet"]===56,"Кабинет преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["email"]==="kruglova@gmail.com","email преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["class"]!==undefined,"Нет данных о классе");
    client.assert(response.body[0]["lesson"]["class"]["number"]===6,"Номер класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["letter"]==="А","Буква класса не корректена");
    client.assert(response.body[0]["student"]!==undefined,"Нет данных о студенте");
    client.assert(response.body[0]["student"]["id"]===1,"id студента не корректен");
    client.assert(response.body[0]["student"]["fio"]==="Кузнецов Алексей Евгеньевич","ФИО студента не корректен");
    client.assert(response.body[0]["student"]["dateOfBirth"]==="2011.01.11","Дата рождения студента не корректено");
    client.assert(response.body[0]["student"]["phone"]==="+79222444488","Номер телефона студента не корректен");
    client.assert(response.body[0]["student"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс студента не корректен");
    client.assert(response.body[0]["student"]["parent"]!==undefined,"Нет данных о родителях Студента");
    client.assert(response.body[0]["student"]["parent"]["id"]===1,"id родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["fio"]==="Кузнецов Евгений Сергеевич","ФИО родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["dateOfBirth"]==="1975.10.01","Дата рождения родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["phone"]==="+79222444488","Номер телефона  родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["placeOfWork"]==="ООО Алмаз","Место работы родителей не корректено");
    client.assert(response.body[0]["student"]["parent"]["email"]==="kuznecov@gmail.com","email родителей не корректен");
    client.assert(response.body[0]["mark"]===5,"Оценка не корректена");
});
 %}

### Тестирование поиска оценок в дневнике по ФИО cтудента
GET http://localhost:8000/assessmentReport?student_fio=Кузнецов Алексей Евгеньевич

> {%
client.test("Тестирование возможности смотреть оценки по student_fio",function (){
    client.assert(response.status===200, "Проверяю код ответа. Ожидаю код 200. Фактический код: "+response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/json. Фактически: "+response.contentType.mimeType);
    client.assert(response.body[0]["lesson"]!==undefined,"Нет данных об занятии");
    client.assert(response.body[0]["lesson"]["id"]===1,"id занятия не корректен");
    client.assert(response.body[0]["lesson"]["item"]!==undefined,"Нет данных о предмете");
    client.assert(response.body[0]["lesson"]["item"]["id"]===1,"id предмета не корректен");
    client.assert(response.body[0]["lesson"]["item"]["name"]==="Математика","Название предмета не корректено");
    client.assert(response.body[0]["lesson"]["item"]["description"]==="Математика","Расшифровка предмета не корректено");
    client.assert(response.body[0]["lesson"]["date"]==="2011.11.10 8:30","Дата занятия не корректно");
    client.assert(response.body[0]["lesson"]["lessonDuration"]===40,"Продолжительность занятия не корректно");
    client.assert(response.body[0]["lesson"]["teacher"]!==undefined,"Нет данных о преподавателе");
    client.assert(response.body[0]["lesson"]["teacher"]["id"]===1,"id преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["fio"]==="Круглова Наталия Сергеевна","Фио преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["dateOfBirth"]==="1965.01.11","Дата рождения преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["phone"]==="+79222444411","Номер телефона преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["address"]==="ул. Ясная, д. 54, кв. 19","Адресс преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["cabinet"]===56,"Кабинет преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["email"]==="kruglova@gmail.com","email преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["class"]!==undefined,"Нет данных о классе");
    client.assert(response.body[0]["lesson"]["class"]["id"]===3,"id класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["number"]===6,"Номер класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["letter"]==="А","Буква класса не корректена");
    client.assert(response.body[0]["student"]!==undefined,"Нет данных о студенте");
    client.assert(response.body[0]["student"]["id"]===1,"id студента не корректен");
    client.assert(response.body[0]["student"]["fio"]==="Кузнецов Алексей Евгеньевич","ФИО студента не корректен");
    client.assert(response.body[0]["student"]["dateOfBirth"]==="2011.01.11","Дата рождения студента не корректено");
    client.assert(response.body[0]["student"]["phone"]==="+79222444488","Номер телефона студента не корректен");
    client.assert(response.body[0]["student"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс студента не корректен");
    client.assert(response.body[0]["student"]["parent"]!==undefined,"Нет данных о родителях Студента");
    client.assert(response.body[0]["student"]["parent"]["id"]===1,"id родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["fio"]==="Кузнецов Евгений Сергеевич","ФИО родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["dateOfBirth"]==="1975.10.01","Дата рождения родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["phone"]==="+79222444488","Номер телефона  родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["placeOfWork"]==="ООО Алмаз","Место работы родителей не корректено");
    client.assert(response.body[0]["student"]["parent"]["email"]==="kuznecov@gmail.com","email родителей не корректен");
    client.assert(response.body[0]["mark"]===5,"Оценка не корректена");
});
 %}


### Тесты для ученика

### Тестирование поиска оценок в дневнике по Названию предмета
GET http://localhost:8000/studentReport?item_name=Математика

> {%
client.test("Тестирование возможности смотреть оценки по item_name",function (){
    client.assert(response.status===200, "Проверяю код ответа. Ожидаю код 200. Фактический код: "+response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/json. Фактически: "+response.contentType.mimeType);
    client.assert(response.body[0]["lesson"]!==undefined,"Нет данных об занятии");
    client.assert(response.body[0]["lesson"]["id"]===1,"id занятия не корректен");
    client.assert(response.body[0]["lesson"]["item"]!==undefined,"Нет данных о предмете");
    client.assert(response.body[0]["lesson"]["item"]["id"]===1,"id предмета не корректен");
    client.assert(response.body[0]["lesson"]["item"]["name"]==="Математика","Название предмета не корректено");
    client.assert(response.body[0]["lesson"]["item"]["description"]==="Математика","Расшифровка предмета не корректено");
    client.assert(response.body[0]["lesson"]["date"]==="2011.11.10 8:30","Дата занятия не корректно");
    client.assert(response.body[0]["lesson"]["lessonDuration"]===40,"Продолжительность занятия не корректно");
    client.assert(response.body[0]["lesson"]["teacher"]!==undefined,"Нет данных о преподавателе");
    client.assert(response.body[0]["lesson"]["teacher"]["id"]===1,"id преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["fio"]==="Круглова Наталия Сергеевна","Фио преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["dateOfBirth"]==="1965.01.11","Дата рождения преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["phone"]==="+79222444411","Номер телефона преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["address"]==="ул. Ясная, д. 54, кв. 19","Адресс преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["cabinet"]===56,"Кабинет преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["email"]==="kruglova@gmail.com","email преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["class"]!==undefined,"Нет данных о классе");
    client.assert(response.body[0]["lesson"]["class"]["id"]===3,"id класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["number"]===6,"Номер класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["letter"]==="А","Буква класса не корректена");
    client.assert(response.body[0]["student"]!==undefined,"Нет данных о студенте");
    client.assert(response.body[0]["student"]["id"]===1,"id студента не корректен");
    client.assert(response.body[0]["student"]["fio"]==="Кузнецов Алексей Евгеньевич","ФИО студента не корректен");
    client.assert(response.body[0]["student"]["dateOfBirth"]==="2011.01.11","Дата рождения студента не корректено");
    client.assert(response.body[0]["student"]["phone"]==="+79222444488","Номер телефона студента не корректен");
    client.assert(response.body[0]["student"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс студента не корректен");
    client.assert(response.body[0]["student"]["parent"]!==undefined,"Нет данных о родителях Студента");
    client.assert(response.body[0]["student"]["parent"]["id"]===1,"id родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["fio"]==="Кузнецов Евгений Сергеевич","ФИО родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["dateOfBirth"]==="1975.10.01","Дата рождения родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["phone"]==="+79222444488","Номер телефона  родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["placeOfWork"]==="ООО Алмаз","Место работы родителей не корректено");
    client.assert(response.body[0]["student"]["parent"]["email"]==="kuznecov@gmail.com","email родителей не корректен");
    client.assert(response.body[0]["mark"]===5,"Оценка не корректена");
});
 %}

### Тестирование поиска оценок в дневнике по расшифровке названия предмета
GET http://localhost:8000/studentReport?item_description=Математика

> {%
client.test("Тестирование возможности смотреть оценки по item_description",function (){
    client.assert(response.status===200, "Проверяю код ответа. Ожидаю код 200. Фактический код: "+response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/json. Фактически: "+response.contentType.mimeType);
    client.assert(response.body[0]["lesson"]!==undefined,"Нет данных об занятии");
    client.assert(response.body[0]["lesson"]["id"]===1,"id занятия не корректен");
    client.assert(response.body[0]["lesson"]["item"]!==undefined,"Нет данных о предмете");
    client.assert(response.body[0]["lesson"]["item"]["id"]===1,"id предмета не корректен");
    client.assert(response.body[0]["lesson"]["item"]["name"]==="Математика","Название предмета не корректено");
    client.assert(response.body[0]["lesson"]["item"]["description"]==="Математика","Расшифровка предмета не корректено");
    client.assert(response.body[0]["lesson"]["date"]==="2011.11.10 8:30","Дата занятия не корректно");
    client.assert(response.body[0]["lesson"]["lessonDuration"]===40,"Продолжительность занятия не корректно");
    client.assert(response.body[0]["lesson"]["teacher"]!==undefined,"Нет данных о преподавателе");
    client.assert(response.body[0]["lesson"]["teacher"]["id"]===1,"id преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["fio"]==="Круглова Наталия Сергеевна","Фио преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["dateOfBirth"]==="1965.01.11","Дата рождения преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["phone"]==="+79222444411","Номер телефона преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["address"]==="ул. Ясная, д. 54, кв. 19","Адресс преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["cabinet"]===56,"Кабинет преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["email"]==="kruglova@gmail.com","email преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["class"]!==undefined,"Нет данных о классе");
    client.assert(response.body[0]["lesson"]["class"]["id"]===3,"id класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["number"]===6,"Номер класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["letter"]==="А","Буква класса не корректена");
    client.assert(response.body[0]["student"]!==undefined,"Нет данных о студенте");
    client.assert(response.body[0]["student"]["id"]===1,"id студента не корректен");
    client.assert(response.body[0]["student"]["fio"]==="Кузнецов Алексей Евгеньевич","ФИО студента не корректен");
    client.assert(response.body[0]["student"]["dateOfBirth"]==="2011.01.11","Дата рождения студента не корректено");
    client.assert(response.body[0]["student"]["phone"]==="+79222444488","Номер телефона студента не корректен");
    client.assert(response.body[0]["student"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс студента не корректен");
    client.assert(response.body[0]["student"]["parent"]!==undefined,"Нет данных о родителях Студента");
    client.assert(response.body[0]["student"]["parent"]["id"]===1,"id родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["fio"]==="Кузнецов Евгений Сергеевич","ФИО родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["dateOfBirth"]==="1975.10.01","Дата рождения родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["phone"]==="+79222444488","Номер телефона  родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["placeOfWork"]==="ООО Алмаз","Место работы родителей не корректено");
    client.assert(response.body[0]["student"]["parent"]["email"]==="kuznecov@gmail.com","email родителей не корректен");
    client.assert(response.body[0]["mark"]===5,"Оценка не корректена");
});
 %}

### Тестирование поиска оценок в дневнике по дате проведения занятия
GET http://localhost:8000/studentReport?lesson_date=2011.11.10 8:30

> {%
client.test("Тестирование возможности смотреть оценки по lesson_date",function (){
    client.assert(response.status===200, "Проверяю код ответа. Ожидаю код 200. Фактический код: "+response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/json. Фактически: "+response.contentType.mimeType);
    client.assert(response.body[0]["lesson"]!==undefined,"Нет данных об занятии");
    client.assert(response.body[0]["lesson"]["id"]===1,"id занятия не корректен");
    client.assert(response.body[0]["lesson"]["item"]!==undefined,"Нет данных о предмете");
    client.assert(response.body[0]["lesson"]["item"]["id"]===1,"id предмета не корректен");
    client.assert(response.body[0]["lesson"]["item"]["name"]==="Математика","Название предмета не корректено");
    client.assert(response.body[0]["lesson"]["item"]["description"]==="Математика","Расшифровка предмета не корректено");
    client.assert(response.body[0]["lesson"]["date"]==="2011.11.10 8:30","Дата занятия не корректно");
    client.assert(response.body[0]["lesson"]["lessonDuration"]===40,"Продолжительность занятия не корректно");
    client.assert(response.body[0]["lesson"]["teacher"]!==undefined,"Нет данных о преподавателе");
    client.assert(response.body[0]["lesson"]["teacher"]["id"]===1,"id преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["fio"]==="Круглова Наталия Сергеевна","Фио преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["dateOfBirth"]==="1965.01.11","Дата рождения преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["phone"]==="+79222444411","Номер телефона преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["address"]==="ул. Ясная, д. 54, кв. 19","Адресс преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["cabinet"]===56,"Кабинет преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["email"]==="kruglova@gmail.com","email преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["class"]!==undefined,"Нет данных о классе");
    client.assert(response.body[0]["lesson"]["class"]["number"]===6,"Номер класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["letter"]==="А","Буква класса не корректена");
    client.assert(response.body[0]["student"]!==undefined,"Нет данных о студенте");
    client.assert(response.body[0]["student"]["id"]===1,"id студента не корректен");
    client.assert(response.body[0]["student"]["fio"]==="Кузнецов Алексей Евгеньевич","ФИО студента не корректен");
    client.assert(response.body[0]["student"]["dateOfBirth"]==="2011.01.11","Дата рождения студента не корректено");
    client.assert(response.body[0]["student"]["phone"]==="+79222444488","Номер телефона студента не корректен");
    client.assert(response.body[0]["student"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс студента не корректен");
    client.assert(response.body[0]["student"]["parent"]!==undefined,"Нет данных о родителях Студента");
    client.assert(response.body[0]["student"]["parent"]["id"]===1,"id родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["fio"]==="Кузнецов Евгений Сергеевич","ФИО родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["dateOfBirth"]==="1975.10.01","Дата рождения родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["phone"]==="+79222444488","Номер телефона  родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["placeOfWork"]==="ООО Алмаз","Место работы родителей не корректено");
    client.assert(response.body[0]["student"]["parent"]["email"]==="kuznecov@gmail.com","email родителей не корректен");
    client.assert(response.body[0]["mark"]===5,"Оценка не корректена");
});
 %}

### Тестирование поиска оценок в дневнике по ФИО cтудента
GET http://localhost:8000/studentReport?student_fio=Кузнецов Алексей Евгеньевич

> {%
client.test("Тестирование возможности смотреть оценки по student_fio",function (){
    client.assert(response.status===200, "Проверяю код ответа. Ожидаю код 200. Фактический код: "+response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/json. Фактически: "+response.contentType.mimeType);
    client.assert(response.body[0]["lesson"]!==undefined,"Нет данных об занятии");
    client.assert(response.body[0]["lesson"]["id"]===1,"id занятия не корректен");
    client.assert(response.body[0]["lesson"]["item"]!==undefined,"Нет данных о предмете");
    client.assert(response.body[0]["lesson"]["item"]["id"]===1,"id предмета не корректен");
    client.assert(response.body[0]["lesson"]["item"]["name"]==="Математика","Название предмета не корректено");
    client.assert(response.body[0]["lesson"]["item"]["description"]==="Математика","Расшифровка предмета не корректено");
    client.assert(response.body[0]["lesson"]["date"]==="2011.11.10 8:30","Дата занятия не корректно");
    client.assert(response.body[0]["lesson"]["lessonDuration"]===40,"Продолжительность занятия не корректно");
    client.assert(response.body[0]["lesson"]["teacher"]!==undefined,"Нет данных о преподавателе");
    client.assert(response.body[0]["lesson"]["teacher"]["id"]===1,"id преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["fio"]==="Круглова Наталия Сергеевна","Фио преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["dateOfBirth"]==="1965.01.11","Дата рождения преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["phone"]==="+79222444411","Номер телефона преподавателя не корректено");
    client.assert(response.body[0]["lesson"]["teacher"]["address"]==="ул. Ясная, д. 54, кв. 19","Адресс преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["cabinet"]===56,"Кабинет преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["teacher"]["email"]==="kruglova@gmail.com","email преподавателя не корректен");
    client.assert(response.body[0]["lesson"]["class"]!==undefined,"Нет данных о классе");
    client.assert(response.body[0]["lesson"]["class"]["id"]===3,"id класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["number"]===6,"Номер класса не корректен");
    client.assert(response.body[0]["lesson"]["class"]["letter"]==="А","Буква класса не корректена");
    client.assert(response.body[0]["student"]!==undefined,"Нет данных о студенте");
    client.assert(response.body[0]["student"]["id"]===1,"id студента не корректен");
    client.assert(response.body[0]["student"]["fio"]==="Кузнецов Алексей Евгеньевич","ФИО студента не корректен");
    client.assert(response.body[0]["student"]["dateOfBirth"]==="2011.01.11","Дата рождения студента не корректено");
    client.assert(response.body[0]["student"]["phone"]==="+79222444488","Номер телефона студента не корректен");
    client.assert(response.body[0]["student"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс студента не корректен");
    client.assert(response.body[0]["student"]["parent"]!==undefined,"Нет данных о родителях Студента");
    client.assert(response.body[0]["student"]["parent"]["id"]===1,"id родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["fio"]==="Кузнецов Евгений Сергеевич","ФИО родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["dateOfBirth"]==="1975.10.01","Дата рождения родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["phone"]==="+79222444488","Номер телефона  родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["address"]==="ул. Казанская, д. 35Б, кв. 23","Адресс родителей не корректен");
    client.assert(response.body[0]["student"]["parent"]["placeOfWork"]==="ООО Алмаз","Место работы родителей не корректено");
    client.assert(response.body[0]["student"]["parent"]["email"]==="kuznecov@gmail.com","email родителей не корректен");
    client.assert(response.body[0]["mark"]===5,"Оценка не корректена");
});
 %}

### Тестирование некорреткного ввода названия предмета
GET http://localhost:8000/assessmentReport?item_name[]=Математика

> {%
client.test("Тестирование некорреткного ввода названия предмета",function ()
{
    client.assert(response.status=== 500, "Проверяю код ответа. Ожидаю код 404. Фактическое значение: " + response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/type фактически " + response.contentType.mimeType);
    client.assert(response.body["message"]==="Incorrect item name","Некоректное сообщение");
    client.assert(response.body["status"]==="fail","Некоректный статус");
});
 %}

### Тестирование некорреткного ввода расшифровки названия предмета
GET http://localhost:8000/studentReport?item_description[]=Математика

> {%
client.test("Тестирование некорреткного ввода рассшифровки предмета",function ()
{
    client.assert(response.status=== 500, "Проверяю код ответа. Ожидаю код 404. Фактическое значение: " + response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/type фактически " + response.contentType.mimeType);
    client.assert(response.body["message"]==="Incorrect item description","Некоректное сообщение");
    client.assert(response.body["status"]==="fail","Некоректный статус");
});
 %}

### Тестирование некорреткного ввода дате проведения занятия
GET http://localhost:8000/studentReport?lesson_date[]=2011.11.10 8:30

> {%
client.test("Тестирование некорреткного ввода даты занятия",function ()
{
    client.assert(response.status=== 500, "Проверяю код ответа. Ожидаю код 404. Фактическое значение: " + response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/type фактически " + response.contentType.mimeType);
    client.assert(response.body["message"]==="Incorrect lesson date","Некоректное сообщение");
    client.assert(response.body["status"]==="fail","Некоректный статус");
});
 %}

### Тестирование некорреткного ввода ФИО cтудента
GET http://localhost:8000/studentReport?student_fio[]=Кузнецов Алексей Евгеньевич

> {%
client.test("Тестирование некорреткного ввода fio преподавателя",function ()
{
    client.assert(response.status=== 500, "Проверяю код ответа. Ожидаю код 404. Фактическое значение: " + response.status);
    client.assert(response.contentType.mimeType==="application/json", "Ожидаю application/type фактически " + response.contentType.mimeType);
    client.assert(response.body["message"]==="Incorrect student fio","Некоректное сообщение");
    client.assert(response.body["status"]==="fail","Некоректный статус");
});
 %}






